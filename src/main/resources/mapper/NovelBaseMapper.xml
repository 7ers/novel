<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.novel.dao.NovelBaseMapper">
  <resultMap id="BaseResultMap" type="com.demo.novel.entity.NovelBase">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bookname" jdbcType="VARCHAR" property="bookname" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.demo.novel.entity.NovelBase">
    <result column="abstract" jdbcType="LONGVARCHAR" property="abstract" />
  </resultMap>
  <sql id="Base_Column_List">
    id, bookname, author, category, status, updatetime
  </sql>
  <sql id="Blob_Column_List">
    abstract
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_novel_base
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByBookName" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_novel_base
    where bookname = #{bookname,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_novel_base
    order by category
  </select>
  <select id="selectByEntity" parameterType="com.demo.novel.entity.NovelBase" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_novel_base
      WHERE bookname LIKE CONCAT('%',#{bookname,jdbcType=VARCHAR},'%')
      AND status LIKE CONCAT('%',#{status,jdbcType=VARCHAR},'%')
      order by category
  </select>
  <select id="selectByCategory" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_novel_base
    WHERE category LIKE CONCAT('%',#{category,jdbcType=VARCHAR},'%')
    order by category
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_novel_base
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.demo.novel.entity.NovelBase">
    insert into t_novel_base (bookname, author,
      category, status, updatetime,
      abstract)
    values (#{bookname,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR},
      #{category,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, now(),
      #{abstracts,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.demo.novel.entity.NovelBase">
    insert into t_novel_base
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bookname != null">
        bookname,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
      <if test="abstract != null">
        abstract,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bookname != null">
        #{bookname,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="abstract != null">
        #{abstract,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.novel.entity.NovelBase">
    update t_novel_base
    <set>
      <if test="bookname != null">
        bookname = #{bookname,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="abstract != null">
        abstract = #{abstract,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.demo.novel.entity.NovelBase">
    update t_novel_base
    set bookname = #{bookname,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      abstract = #{abstract,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.novel.entity.NovelBase">
    update t_novel_base
    set bookname = #{bookname,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      updatetime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>